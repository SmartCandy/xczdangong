<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
 
<style type="text/css"> 
* {
	margin: 0px; padding: 0px;
}
table {
	margin: 0px; padding: 0px; border: 0px currentColor;
}
dl£¬dd {
	border: currentColor;
}
img {
	border: currentColor;
}
ul li {
	list-style-type: none;
}
body{
	position:relative;margin:0;padding:0px 0 0 0;
}
.mF_liuzg {
	background: rgb(255, 255, 255); font: 12px/1.5 Verdana, Geneva; margin: 30px auto; width: 916px; height: 450px; overflow: hidden; position: relative; font-size-adjust: none; font-stretch: normal;
}
.mF_liuzg .loading {
	background: rgb(44, 44, 44); width: 100%; height: 450px; text-align: center; color: rgb(255, 255, 255); line-height: 450px; vertical-align: middle; position: absolute; z-index: 9999;
}
.mF_liuzg .pic li {
	width: 916px; overflow: hidden; position: relative;
}
.mF_liuzg .pic li p {
	width: 916px; position: absolute;
}
.mF_liuzg .pic li p a {
	display: block;
}
.mF_liuzg .pic li p img {
	width: 916px; height: 450px;
}
.mF_liuzg .txt li {
	width: 916px; height: 36px; bottom: 0px; line-height: 36px; overflow: hidden; display: none; position: absolute; z-index: 2;
}
.mF_liuzg .txt li a {
	padding: 2px 0px 0px 16px; color: rgb(255, 255, 255); font-size: 14px; font-weight: bold; text-decoration: none; display: block;
}
.mF_liuzg .txt-bg {
	background: rgb(51, 51, 51); left: 1px; width: 916px; height: 36px; bottom: 0px; overflow: hidden; filter: alpha(opacity=60); position: absolute; z-index: 1; opacity: 0.6;
}
.mF_liuzg .num {
	right: 8px; bottom: 6px; color: rgb(51, 51, 51); position: absolute; z-index: 3;
}
.mF_liuzg .num li {
	background: rgb(67, 67, 67); width: 22px; height: 18px; text-align: center; color: rgb(255, 255, 255); line-height: 18px; margin-right: 3px; float: left; filter: alpha(opacity=90); position: relative; cursor: pointer; opacity: 0.9;
}
.mF_liuzg .num li.current {
	background: rgb(254, 0, 114); top: -2px; height: 20px; color: rgb(255, 255, 255); line-height: 20px; font-weight: bold;
}
.mF_liuzg .num li.hover {
	background: rgb(254, 0, 114); top: -2px; height: 20px; color: rgb(255, 255, 255); line-height: 20px; font-weight: bold;
}

</style>



<div id="myFocus" class="mF_liuzg">
	<div class="loading"><span>请稍候...</span></div>
	<ul class="pic">
		<!--{foreach from=$flash name=no item=flash}-->
		<li><a href="{$flash.url}" target="_blank"><img src="{$flash.src}"/></a>
		<span class="txt-bg"><a href="{$flash.url}" target="_blank">{$flash.text}</a></span>
		</li>
		<!--{/foreach}-->
	</ul>
</div>








<script type="text/javascript">
var myFocus = {
  $: function(id) {
    return document.getElementById(id);
  },
  $$: function(tag, obj) {
    return (typeof obj == 'object' ? obj : this.$(obj)).getElementsByTagName(tag);
  },
  style: function(obj, style) {
    return (+[1, ]) ? window.getComputedStyle(obj, null)[style] : obj.currentStyle[style];
  }, //getStyle简化版
  easeOut: function(t, b, c, d) {
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  },
  move: function(obj, prop, val, type, spd, fn) { //运动函数，spd为运动需要的时间，时间越大速度越小
    var t = 0,
      b = parseInt(this.style(obj, prop)),
      c = val - b,
      d = spd || 50,
      st = type,
      m = c > 0 ? 'ceil' : 'floor';
    if (obj[prop + 'Timer']) clearInterval(obj[prop + 'Timer']);
    obj[prop + 'Timer'] = setInterval(function() {
      if (t < d) {
        obj.style[prop] = Math[m](myFocus[st](++t, b, c, d)) + 'px';
      } else {
        clearInterval(obj[prop + 'Timer']);
        fn && fn.call(obj);
      }
    }, 10);
    return this;
  },
  addList: function(obj, cla, x) { //生成HMTL,cla为列表的class,其中封装有:cla='txt'(生成alt文字),cla='num'(生成按钮数字),cla='thumb'(生成小图)
    var s = [],
      n = x || this.$$('li', this.$$('ul', obj)[0]).length,
      num = cla.length;
    for (var j = 0; j < num; j++) {
      s.push('<ul class=' + cla[j] + '>');
      for (var i = 0; i < n; i++) {
        s.push('<li>' + (cla[j] == 'num' ? (i + 1) : (cla[j] == 'txt' ? this.$$('li', obj)[i].innerHTML.replace(/\<img.*?\>/i, this.$$('img', obj)[i].alt) : (cla[j] == 'thumb' ? '<img src=' + (this.$$('img', obj)[i].getAttribute("thumb") || this.$$('img', obj)[i].src) + ' />' : ''))) + '<span></span></li>')
      };
      s.push('</ul>');
    };
    obj.innerHTML += s.join('');
  },
  setting: function(par) {
    if (window.attachEvent) {
      window.attachEvent('onload', function() {
        myFocus[par.style](par)
      });
    }　　
    else {
      window.addEventListener('load', function() {
        myFocus[par.style](par)
      }, false);
    }
  },
  mF_liuzg: function(par) {
    var box = this.$(par.id),
      boxH = box.offsetHeight,
      t = par.time * 1000;
    this.addList(box, ['txt-bg', 'txt', 'num']);
    var pic = this.$$('li', this.$$('ul', box)[0]),
      n = pic.length;
    var c = boxH % par.chip ? 8 : par.chip,
      h = boxH / c,
      pics = [];
    for (var i = 0; i < c; i++) {
      pics.push('<li><p>')
      for (var j = 0; j < n; j++) pics.push(pic[j].innerHTML);
      pics.push('</p></li>')
    }
    this.$$('ul', box)[0].innerHTML = pics.join('');
    var ul = this.$$('ul', box),
      txt = this.$$('li', ul[2]),
      btn = this.$$('li', ul[3]),
      pic = this.$$('li', ul[0]);
    for (var i = 0; i < c; i++) { //初始化样式设置
      this.$$('p', pic[i])[0].style.top = -i * h + 'px';
      pic[i].style.height = h + 'px';
      this.$$('p', pic[i])[0].style.height = boxH * c + 'px';
    }
    var index = 0; //开始显示的序号
    box.removeChild(this.$$('div', box)[0]);
    var run = function(idx) {
      var tt = par.type == 4 ? Math.round(1 + (Math.random() * (3 - 1))) : par.type; //效果选择
      btn[index].className = '';
      txt[index].style.display = 'none';
      if (index == n - 1) index = -1;
      var N = idx != undefined ? idx : index + 1;
      var spd = tt == 2 ? 20 : (tt == 1 ? 80 : Math.round(20 + (Math.random() * (80 - 20))));
      for (var i = 0; i < c; i++) {
        if (tt == 3) spd = Math.round(20 + (Math.random() * (80 - 20)));
        myFocus.move(myFocus.$$('p', pic[i])[0], 'top', -N * c * h - i * h, 'easeOut', spd);
        spd = tt == 2 ? spd + 10 : (tt == 1 ? spd - 10 : spd);
      }
      btn[N].className = 'current';
      txt[N].style.display = 'block';
      index = N;
    }
    run(index);
    var auto = setInterval(function() {
      run()
    }, t);
    for (var j = 0; j < n; j++) {
      btn[j].j = j;
      btn[j].onclick = function() {
        if (!this.className) run(this.j)
      }
    }
    box.onmouseover = function() {
      clearInterval(auto);
    }
    box.onmouseout = function() {
      auto = setInterval(function() {
        run()
      }, t);
    }
    for (var i = 0, lk = this.$$('a', box), ln = lk.length; i < ln; i++) lk[i].onfocus = function() {
        this.blur();
      } //去除虚线框
  }
};
myFocus.setting({
  style: 'mF_liuzg', //style为风格样式，
  id: 'myFocus', //焦点图ID
  chip: 8, //图片切片数量，能被焦点图的高整除才有效，默认为8片
  type: 2, //切片效果，1为甩头，2为甩尾，3为凌乱，4为随机效果
  time: 4 //每帧图片时间间隔
});
// var $ = function (id) {
// 	return "string" == typeof id ? document.getElementById(id) : id;
// };

// var Class = {
//   create: function() {
// 	return function() {
// 	  this.initialize.apply(this, arguments);
// 	}
//   }
// }

// Object.extend = function(destination, source) {
// 	for (var property in source) {
// 		destination[property] = source[property];
// 	}
// 	return destination;
// }

// var TransformView = Class.create();
// TransformView.prototype = {
//   //容器对象,滑动对象,切换参数,切换数量
//   initialize: function(container, slider, parameter, count, options) {
// 	if(parameter <= 0 || count <= 0) return;
// 	var oContainer = $(container), oSlider = $(slider), oThis = this;

// 	this.Index = 0;//当前索引
	
// 	this._timer = null;//定时器
// 	this._slider = oSlider;//滑动对象
// 	this._parameter = parameter;//切换参数
// 	this._count = count || 0;//切换数量
// 	this._target = 0;//目标参数
	
// 	this.SetOptions(options);
	
// 	this.Up = !!this.options.Up;
// 	this.Step = Math.abs(this.options.Step);
// 	this.Time = Math.abs(this.options.Time);
// 	this.Auto = !!this.options.Auto;
// 	this.Pause = Math.abs(this.options.Pause);
// 	this.onStart = this.options.onStart;
// 	this.onFinish = this.options.onFinish;
	
// 	oContainer.style.overflow = "hidden";
// 	oContainer.style.position = "relative";
	
// 	oSlider.style.position = "absolute";
// 	oSlider.style.top = oSlider.style.left = 0;
//   },
//   //设置默认属性
//   SetOptions: function(options) {
// 	this.options = {//默认值
// 		Up:			true,//是否向上(否则向左)
// 		Step:		5,//滑动变化率
// 		Time:		10,//滑动延时
// 		Auto:		true,//是否自动转换
// 		Pause:		2000,//停顿时间(Auto为true时有效)
// 		onStart:	function(){},//开始转换时执行
// 		onFinish:	function(){}//完成转换时执行
// 	};
// 	Object.extend(this.options, options || {});
//   },
//   //开始切换设置
//   Start: function() {
// 	if(this.Index < 0){
// 		this.Index = this._count - 1;
// 	} else if (this.Index >= this._count){ this.Index = 0; }
	
// 	this._target = -1 * this._parameter * this.Index;
// 	this.onStart();
// 	this.Move();
//   },
//   //移动
//   Move: function() {
// 	clearTimeout(this._timer);
// 	var oThis = this, style = this.Up ? "top" : "left", iNow = parseInt(this._slider.style[style]) || 0, iStep = this.GetStep(this._target, iNow);
	
// 	if (iStep != 0) {
// 		this._slider.style[style] = (iNow + iStep) + "px";
// 		this._timer = setTimeout(function(){ oThis.Move(); }, this.Time);
// 	} else {
// 		this._slider.style[style] = this._target + "px";
// 		this.onFinish();
// 		if (this.Auto) { this._timer = setTimeout(function(){ oThis.Index++; oThis.Start(); }, this.Pause); }
// 	}
//   },
//   //获取步长
//   GetStep: function(iTarget, iNow) {
// 	var iStep = (iTarget - iNow) / this.Step;
// 	if (iStep == 0) return 0;
// 	if (Math.abs(iStep) < 1) return (iStep > 0 ? 1 : -1);
// 	return iStep;
//   },
//   //停止
//   Stop: function(iTarget, iNow) {
// 	clearTimeout(this._timer);
// 	this._slider.style[this.Up ? "top" : "left"] = this._target + "px";
//   }
// };

// window.onload=function(){
// 	function Each(list, fun){
// 		for (var i = 0, len = list.length; i < len; i++) { fun(list[i], i); }
// 	};
	
// 	var objs = $("idNum").getElementsByTagName("li");
	
// 	var tv = new TransformView("idTransformView", "idSlider", 350, 3, {
// 		onStart : function(){ Each(objs, function(o, i){ o.className = tv.Index == i ? "on" : ""; }) }//按钮样式
// 	});
	
// 	tv.Start();
	
// 	Each(objs, function(o, i){
// 		o.onmouseover = function(){
// 			o.className = "on";
// 			tv.Auto = false;
// 			tv.Index = i;
// 			tv.Start();
// 		}
// 		o.onmouseout = function(){
// 			o.className = "";
// 			tv.Auto = true;
// 			tv.Start();
// 		}
// 	})
	
// 	////////////////////////test2
	
	
// }
</script>
 
 
 
 
 
<div class="blank5"></div>
<div class="blank"></div>